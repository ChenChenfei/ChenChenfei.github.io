---
layout: post
title: 2022-01-29-Verilog学习笔记(二)——数据类型
tags: Verilog
date:    2022-01-29 04:09:40 
categories: [学习] 
---

### Verilog中的数据类型

#### 线网（Wire）
Wire指的是端口与端口之间的物理连线，它与C语言中的变量不同，不能够用作长期存储数据，但是可以进行中间变量的传递（就像物理连线一样）
![图片来自HDLbits](./images/Wire.png)

wire类型的变量的赋值需要通过 assign 语句进行

#### 寄存器（reg）
顾名思义，寄存器可以进行数据的存储和读取，功能上类似于C语言的变量
**需要说明的是，使用reg时最好同时声明位宽，防止出错**

``` verilog
	reg[7:0] reg1; //位宽为8bit的寄存器
```
#### 向量
是我目前感觉贯穿了所有数据类型的一种数据类型，可以通过下标了访问向量中每一位的内容，或者通过“：”来操纵给定区间内的所有位的内容

``` verilog
reg [3:0]      counter ;    //声明4bit位宽的寄存器counter
wire [32-1:0]  gpio_data;   //声明32bit位宽的线型变量gpio_data
wire [8:2]     addr ;       //声明7bit位宽的线型变量addr，位宽范围为8:2
reg [0:31]     data ;       //声明32bit位宽的寄存器变量data, 最高有效位为0
```
**关于中括号内的高位在前还是低位在前的问题，只要保证你的代码前后一致即可，要么全部是高位在前，要么全部是低位在前，不过一般都是高位在前**

#### 数组
数组需要同向量区分开来，向量用与指定位宽，而数组用于指定个数

``` verilog
integer          flag [7:0] ; //8个整数组成的数组
reg  [3:0]       counter [3:0] ; //由4个4bit计数器组成的数组
wire [7:0]       addr_bus [3:0] ; //由4个8bit wire型变量组成的数组
wire             data_bit[7:0][5:0] ; //声明1bit wire型变量的二维数组
reg [31:0]       data_4d[11:0][3:0][3:0][255:0] ; //声明4维的32bit数据变量数组
```
在类型名之后的[]用于指定位宽，在变量名之后的[]用于指定个数（即数组）。

#### 整型变量、字符串、时间变量
##### 整型变量   Integer
声明时不用指明位宽，位宽和编译器有关，一般为32 bit。reg 型变量为无符号数，而 integer 型变量为有符号数。
##### 字符串
保存在reg数据类型的变量中，一个字符占据8bit空间，在声明时应保证空间足够大。
##### 时间变量
Verilog 使用特殊的时间寄存器 time 型变量，对仿真时间进行保存。其宽度一般为 64 bit，通过调用系统函数 $time 获取当前仿真时间。例如：

``` verilog
time       current_time ;
initial begin
       #100 ;
       current_time = $time ; //current_time 的大小为 100
end
```

